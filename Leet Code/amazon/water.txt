

o(n2)

# Python3 implementation of the approach

# Function to return the maximum
# water that can be stored
def maxWater(arr, n) :
	
	# To store the maximum water
	# that can be stored
	res = 0;
	# For every element of the array
	for i in range(1, n - 1) :
		# Find the maximum element on its left
		left = max(arr[:i+1])
		
		# Find the maximum element on its right
		right = max(arr[i+1:])
			
		# Update the maximum water
		res = res + (min(left, right) - arr[i]);

	return res;

# Driver code
if __name__ == "__main__" :

	arr = [0, 1, 0, 2, 1, 0,
		1, 3, 2, 1, 2, 1];
	n = len(arr);
	
	print(maxWater(arr, n));
	
# This code is contributed by AnkitRai01




o(n)


# Python program to find
# maximum amount of water that can
# be trapped within given set of bars.
# Space Complexity : O(1)

def findWater(arr, n):

	# initialize output
	result = 0
	
	# maximum element on left and right
	left_max = 0
	right_max = 0
	
	# indices to traverse the array
	lo = 0
	hi = n-1
	
	while(lo <= hi):
	
		if(arr[lo] < arr[hi]):
		
			if(arr[lo] > left_max):

				# update max in left
				left_max = arr[lo]
			else:

				# water on curr element = max - curr
				result += left_max - arr[lo]
			lo+= 1
		
		else:
		
			if(arr[hi] > right_max):
				# update right maximum
				right_max = arr[hi]
			else:
				result += right_max - arr[hi]
			hi-= 1
		
	return result

# Driver program

arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
n = len(arr)

print("Maximum water that can be accumulated is ",
		findWater(arr, n))

# This code is contributed
# by Anant Agarwal.

