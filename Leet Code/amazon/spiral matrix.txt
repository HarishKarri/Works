# Python3 implementation of the above approach

# Function to return the ring,
# the number x belongs to.
def findRing(arr, x):

	# Returns -1 if number x is smaller
	# than least element of arr
	if arr[0][0] > x:
		return -1

	# l and r represent the diagonal
	# elements to search in
	l, r = 0, (n + 1) // 2 - 1

	# Returns -1 if number x is greater
	# than the largest element of arr
	if n % 2 == 1 and arr[r][r] < x:
		return -1
	if n % 2 == 0 and arr[r + 1][r] < x:
		return -1

	while l < r:
		mid = (l + r) // 2
		print("mid",mid)
		if arr[mid][mid] <= x:
			
			if (arr[mid + 1][mid + 1] > x):  #mid == (n + 1) // 2 - 1 
				print("dasdas")
				return mid
			else:
			    print("vvv")
			    l = mid + 1
		
		else:
		    print("dasdasd123")
		    r = mid - 1
	
	return r

# Function to perform binary search
# on an array sorted in increasing order
# l and r represent the left and right
# index of the row to be searched
def binarySearchRowInc(arr, row, l, r, x):

	while l <= r:
		mid = (l + r) // 2
		
		if arr[row][mid] == x:
			return mid
		elif arr[row][mid] < x:
			l = mid + 1
		else:
			r = mid - 1
	
	return -1

# Function to perform binary search on
# a particular column of the 2D array
# t and b represent top and
# bottom rows
def binarySearchColumnInc(arr, col, t, b, x):

	while t <= b:
		
		mid = (t + b) // 2
		
		if arr[mid][col] == x:
			return mid
		elif arr[mid][col] < x:
			t = mid + 1
		else:
			b = mid - 1
	
	return -1

# Function to perform binary search on a
# particular column of the 2D array
def binarySearchColumnDec(arr, col, t, b, x):

	while t <= b:
		mid = (t + b) // 2
		
		if arr[mid][col] == x:
			return mid
		elif arr[mid][col] < x:
			b = mid - 1
		else:
			t = mid + 1
	
	return -1

# Function to perform binary search on
# an array sorted in decreasing order
def binarySearchRowDec(arr, row, l, r, x):

	while l <= r:
		
		mid = (l + r) // 2
		
		if arr[row][mid] == x:
			return mid
		elif arr[row][mid] < x:
			r = mid - 1
		else:
			l = mid + 1
	
	return -1


# Function to find the position of the number x
def spiralBinary(arr, x):

	# Finding the ring
	f1 = findRing(arr, x)
	print("f1",f1)
	# To store row and column
	r, c = None, None

	if f1 == -1:
		print("-1")
		return

	# Edge case if n is odd
	if n % 2 == 1 and f1 == (n + 1) // 2 - 1:
		print(f1, f1)
		return

	# Check which of the 4 sides,
	# the number x lies in
	if x < arr[f1][n - f1 - 1]:
		c = binarySearchRowInc(arr, f1, f1,n - f1 - 2, x)
		r = f1
	
	elif x < arr[n - f1 - 1][n - f1 - 1]:
		c = n - f1 - 1
		
		r = binarySearchColumnInc(arr, n - f1 - 1, f1,n - f1 - 2, x)
	
	elif x < arr[n - f1 - 1][f1]:
		
		c = binarySearchRowDec(arr, n - f1 - 1, f1 + 1,n - f1 - 1, x)
		r = n - f1 - 1
	
	else:
		
		r = binarySearchColumnDec(arr, f1, f1 + 1,n - f1 - 1, x)
		c = f1
	
	# Printing the position
	if c == -1 or r == -1:
		print("-1")
	else:
		print("{0} {1}".format(r, c))

# Driver code
if __name__ == "__main__":
	
	n = 4
	arr = [[1, 2, 3, 4],
		[12, 13, 14, 5],
		[11, 16, 15, 6],
		[10, 9, 8, 7]]

	spiralBinary(arr, 7)

# This code is contributed by Rituraj Jain
